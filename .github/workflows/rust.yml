name: Rust

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

  STAGE: dev

  APP_GITHUB__ID: ${{ vars.APP_GITHUB_ID }}
  APP_GITHUB__SECRET: ${{ secrets.APP_GITHUB__SECRET }}
  APP_DISCORD__ID: ${{ vars.APP_DISCORD__ID }}
  APP_DISCORD__SECRET: ${{ secrets.APP_DISCORD__SECRET }}

  DATABASE_URL: postgres://postgres:password@127.0.0.1:5432/nevermind

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_AWS__S3: ${{ vars.APP_AWS__S3}}
  APP_AWS__CDN: ${{ vars.APP_AWS__CDN }}

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: "never"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/README.md", "**/.env.example"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}

    services:
      redis:
        image: redis/redis-stack-server
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 🏗 Setup rust cache
        uses: Swatinem/rust-cache@v2

      - name: 🏗 Install sqlx
        uses: baptiste0928/cargo-install@v3
        with:
          crate: sqlx-cli
          features: postgres

      - name: 🏗 Setup Database
        run: sqlx db setup

      - name: 🧪 Run tests
        run: cargo test

  offline_query:
    name: Format
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}

    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: 🏗 Install sqlx
        uses: baptiste0928/cargo-install@v3
        with:
          crate: sqlx-cli
          features: postgres

      - name: 🏗 Setup Database
        run: sqlx db setup

      - name: 🔨 Check if offline queries are fresh
        run: cargo sqlx prepare --workspace --check -- --all-targets

  formatting:
    name: Format
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}

    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Enforce formatting
        run: cargo fmt --check

  linting:
    name: Lint
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    env:
      SQLX_OFFLINE: true

    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Linting
        run: cargo clippy -- -D warnings
